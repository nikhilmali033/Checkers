{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nconst sqrCnt = 64;\nexport class Checkers {\n  constructor() {\n    this.pieces = {};\n    this.board = [];\n    let sqrs = [];\n    for (let i = 0; i < sqrCnt; i++) {\n      const isBlack = Math.floor(i / 8) % 2 === 0 && i % 8 % 2 === 0 || Math.floor(i / 8) % 2 === 1 && i % 8 % 2 === 1;\n      let obj = {\n        x: i % 8,\n        y: Math.floor(i / 8),\n        coord: `(${Math.floor(i / 8)}, ${i % 8})`,\n        space_color: isBlack ? 'black' : 'red'\n      };\n      if (obj.y < 3 && !isBlack) {\n        obj.piece = this.createPiece(i % 8, Math.floor(i / 8), true);\n      } else if (obj.y > 4 && isBlack) {\n        obj.piece = this.createPiece(i % 8, Math.floor(i / 8), false);\n      }\n      sqrs.push(obj);\n    }\n    this.board = sqrs;\n  }\n  createPiece(x, y, isBlack = false) {\n    const id = uuidv4();\n    this.pieces[id] = {\n      id,\n      x,\n      y,\n      isBlack: isBlack,\n      isKing: false\n    };\n    return id;\n  }\n  checkSpace(x, y) {\n    return Object.values(this.pieces).find(p => p.x === x && p.y === y);\n  }\n  getValidMoves(id) {\n    const p = this.pieces[id];\n    console.log(p);\n    let validMoves = new Set();\n    let toCheck = [{\n      dx: 1,\n      dy: 1\n    }, {\n      dx: -1,\n      dy: -1\n    }, {\n      dx: 1,\n      dy: -1\n    }, {\n      dx: -1,\n      dy: -1\n    }]; //p.isKing ? [{dx: 1, dy: 1}, {dx: -1, dy: -1}, {dx: 1, dy: -1}, {dx: -1, dy: -1}] : (p.isBlack ? [{dx: 1, dy: 1}, {dx: -1, dy: 1}] : [{dx: 1, dy: -1}, {dx: -1, dy: -1}]);\n    toCheck.forEach(x => {\n      //   if (p.x + x.dx <= 7 && p.y + x.dy <= 7 && p.x + x.dx >= 0 && p.y + x.dy  >= 0) {\n      //     const check = this.checkSpace(p.x + x.dx, p.y + x.dy);\n      //     if (check != null) {\n      //       if (check.isBlack !== p.isBlack) {\n      //         if (p.x + (2 * x.dx) <= 7 && p.y + (2 * x.dy) <= 7 && p.x + (2 * x.dx) >= 0 && p.y + (2 * x.dy) >= 0) {\n      //           if (this.checkSpace(p.x + (2 * x.dx), p.y + (2 * x.dy)) === null) {\n      //             validMoves.add(`(${p.x + (2 * x.dx)}, ${p.y + (2 * x.dy)})`);\n      //           }\n      //         }\n      //       }\n      //     } else {\n      //       validMoves.add(`(${p.x + x.dx}, ${p.y + x.dy})`);\n      //     }\n      //   }\n      validMoves.add(`(${p.x + x.dx}, ${p.y + x.dy})`);\n    });\n    console.log(Array.from(validMoves));\n    return validMoves;\n  }\n}","map":{"version":3,"names":["v4","uuidv4","sqrCnt","Checkers","constructor","pieces","board","sqrs","i","isBlack","Math","floor","obj","x","y","coord","space_color","piece","createPiece","push","id","isKing","checkSpace","Object","values","find","p","getValidMoves","console","log","validMoves","Set","toCheck","dx","dy","forEach","add","Array","from"],"sources":["/Users/mbranni03/Documents/GitHub/Checkers/frontend/src/Game.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\nconst sqrCnt = 64;\nexport class Checkers {\n    pieces = {};\n    board = [];\n\n    constructor() {\n        let sqrs = [];\n        for (let i = 0; i < sqrCnt; i++) {\n            const isBlack = (Math.floor(i/8) % 2 === 0 && (i % 8) % 2 === 0) || (Math.floor(i/8) % 2 === 1 && (i % 8) % 2 === 1);\n            let obj = {\n                x: i % 8,\n                y: Math.floor(i / 8),\n                coord: `(${Math.floor(i / 8)}, ${i % 8})`,\n                space_color: isBlack ? 'black' : 'red',\n            };\n            if (obj.y < 3 && !isBlack) {\n                obj.piece = this.createPiece(i % 8, Math.floor(i / 8), true);\n            } else if (obj.y > 4 && isBlack) {\n                obj.piece = this.createPiece(i % 8, Math.floor(i / 8), false);\n            }\n            sqrs.push(obj);\n        }\n        this.board = sqrs;\n    }\n\n    createPiece(x, y, isBlack=false) {\n        const id = uuidv4();\n        this.pieces[id] = {\n          id,\n          x,\n          y,\n          isBlack: isBlack,\n          isKing: false,\n        }\n        return id;\n    }\n\n    checkSpace(x, y) {\n        return Object.values(this.pieces).find((p) => p.x === x && p.y === y);\n      }\n    \n    getValidMoves(id) {\n        const p = this.pieces[id];\n        console.log(p)\n        let validMoves = new Set();\n        let toCheck = [{dx: 1, dy: 1}, {dx: -1, dy: -1}, {dx: 1, dy: -1}, {dx: -1, dy: -1}]; //p.isKing ? [{dx: 1, dy: 1}, {dx: -1, dy: -1}, {dx: 1, dy: -1}, {dx: -1, dy: -1}] : (p.isBlack ? [{dx: 1, dy: 1}, {dx: -1, dy: 1}] : [{dx: 1, dy: -1}, {dx: -1, dy: -1}]);\n        toCheck.forEach((x) => {\n        //   if (p.x + x.dx <= 7 && p.y + x.dy <= 7 && p.x + x.dx >= 0 && p.y + x.dy  >= 0) {\n        //     const check = this.checkSpace(p.x + x.dx, p.y + x.dy);\n        //     if (check != null) {\n        //       if (check.isBlack !== p.isBlack) {\n        //         if (p.x + (2 * x.dx) <= 7 && p.y + (2 * x.dy) <= 7 && p.x + (2 * x.dx) >= 0 && p.y + (2 * x.dy) >= 0) {\n        //           if (this.checkSpace(p.x + (2 * x.dx), p.y + (2 * x.dy)) === null) {\n        //             validMoves.add(`(${p.x + (2 * x.dx)}, ${p.y + (2 * x.dy)})`);\n        //           }\n        //         }\n        //       }\n        //     } else {\n        //       validMoves.add(`(${p.x + x.dx}, ${p.y + x.dy})`);\n        //     }\n        //   }\n            validMoves.add(`(${p.x + x.dx}, ${p.y + x.dy})`);\n        });\n        console.log(Array.from(validMoves))\n        return validMoves\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}